{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/Layout/Layout.js","components/Controls/Input/Input.js","components/Controls/Controls.js","components/Preview/Preview.js","components/Content/Content.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","Footer","Layout","children","Input","label","type","placeholder","id","value","onChange","event","inputChangeHandler","Controls","action","controlsInput","xCoordinate","yCoordinate","width","height","Preview","previewStyle","display","Number","transform","border","style","Content","useState","setControlsInput","maxValue","setMaxValue","useEffect","element","document","getElementById","box","position","getBoundingClientRect","boxPosition","maxValueDetails","bottom","top","input","target","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4b7322a0.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nconst Header = (props) => {\n    return (\n        <div className=\"header\">\n            <p>sigTuple</p>\n        </div>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = (props) => {\n    return (\n        <div className=\"footer\">\n            <p>Copyright &copy; 2020 sigTuple</p>\n        </div>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport Header from '../Header/Header';\nimport Footer from '../Footer/Footer';\n\nconst Layout = (props) => {\n    return (\n        <div className=\"layout\">\n            <Header />\n            {props.children}\n            <Footer />\n        </div>\n    );\n};\n\nexport default Layout;\n","import React from 'react';\n\nconst Input = (props) => {\n    return (\n        <>\n            <label>{props.label}</label>\n            <input\n                type=\"number\"\n                placeholder={props.label}\n                id={props.id}\n                value={props.value}\n                onChange={(event) => props.inputChangeHandler(event)} />\n        </>\n    );\n};\n\nexport default Input;\n","import React from 'react';\nimport Input from './Input/Input';\nimport './Controls.css';\n\nconst Controls = (props) => {\n    return (\n        <div className=\"controls\">\n            <h2>INPUT</h2>\n            <form action=\"/action_page.php\">\n                <Input\n                    label=\"X Coordinate\"\n                    id=\"xCoordinate\"\n                    value={props.controlsInput.xCoordinate}\n                    inputChangeHandler={(event) => props.inputChangeHandler(event)} />\n                <Input\n                    label=\"Y Coordinate\"\n                    id=\"yCoordinate\"\n                    value={props.controlsInput.yCoordinate}\n                    inputChangeHandler={(event) => props.inputChangeHandler(event)} />\n                <Input\n                    label=\"Width\"\n                    id=\"width\"\n                    value={props.controlsInput.width}\n                    inputChangeHandler={(event) => props.inputChangeHandler(event)} />\n                <Input\n                    label=\"Height\"\n                    id=\"height\"\n                    value={props.controlsInput.height}\n                    inputChangeHandler={(event) => props.inputChangeHandler(event)} />\n            </form>\n        </div>\n    );\n};\n\nexport default Controls;\n","import React from 'react';\nimport './Preview.css';\n\nconst Preview = (props) => {\n\n    const previewStyle = {\n        display: 'flex',\n        width: Number(props.controlsInput.width),\n        height: Number(props.controlsInput.height),\n        transform: `translate(${Number(props.controlsInput.xCoordinate)}px, ${Number(props.controlsInput.yCoordinate)}px)`,\n        border: '2px solid #ccc'\n    };\n\n    return (\n        <div className=\"preview\">\n            <div className=\"preview-content\">\n                <h2>PREVIEW</h2>\n                <div className=\"box-wrapper\" id=\"box-wrapper\">\n                    <div className=\"box\" id=\"box\" style={previewStyle}>\n                        <div className=\"dot\">.</div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Preview;\n","import React, { useState, useEffect } from 'react';\nimport Controls from '../Controls/Controls';\nimport Preview from '../Preview/Preview';\nimport './Content.css';\n\nconst Content = (props) => {\n\n    const [controlsInput, setControlsInput] = useState({\n        xCoordinate: 0,\n        yCoordinate: 0,\n        width: 100,\n        height: 100\n    });\n\n    const [maxValue, setMaxValue] = useState({\n        xCoordinate: 0,\n        yCoordinate: 0,\n    })\n\n    useEffect(() => {\n        const element = document.getElementById('box-wrapper');\n        const box = document.getElementById('box')\n        const position = element.getBoundingClientRect();\n        const boxPosition = box.getBoundingClientRect()\n\n        const maxValueDetails = {};\n        maxValueDetails.xCoordinate = (position.bottom - (boxPosition.width / 2));\n        maxValueDetails.yCoordinate = (position.top - (boxPosition.height / 2));\n        maxValueDetails.width = position.width;\n        maxValueDetails.height = position.height;\n\n        setMaxValue(maxValueDetails);\n    }, []);\n\n    const inputChangeHandler = (event) => {\n        const input = { ...controlsInput };\n        if (event.target.value > maxValue[event.target.id]) {\n            alert(`Max value of ${event.target.id} is ${maxValue[event.target.id]}`)\n        } else {\n            input[event.target.id] = event.target.value;\n            setControlsInput(input);\n        }\n    };\n\n    return (\n        <div className=\"content\">\n            <Controls\n                controlsInput={controlsInput}\n                inputChangeHandler={(event) => inputChangeHandler(event)} />\n            <Preview controlsInput={controlsInput} />\n        </div>\n    );\n};\n\nexport default Content;\n","import React from 'react';\nimport Layout from './components/Layout/Layout';\nimport Content from './components/Content/Content';\n\nconst App = (props) => {\n    return (\n        <div className=\"app\">\n            <Layout>\n                <Content />\n            </Layout>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}